# call PDM functionality to activate venv
function pdm-activate
  eval (pdm venv activate "$argv[1]")
end

function ssh-executable
  fd -E '*.pub' '^id_' ~/.ssh -x chmod 400
end

# load envfile in arg1, if not supplied, defaults to ".env"
function dotenv
  set -f envfile (if test -n "$argv"; echo $argv[1]; else; echo .env; end)
  # set -gx -a; source $envfile; set -e -gx
  if not test -f "$envfile"
    echo "Unable to load $envfile"
    return 1
  end
  echo "Loading $envfile"
  echo "Exporting keys:"
  for line in (cat $envfile | grep -v '^#' | grep -v '^\s*$')
    set item (string split -m 1 '=' $line)
    set -gx $item[1] $item[2]
    echo "  $item[1]"
  end
end

# SSH Agent

function sshagent_findsockets
	find /tmp -uid (id -u) -type s -name agent.\* 2>/dev/null
end

function sshagent_testsocket
    if [ ! -x (command which ssh-add) ] ;
        echo "ssh-add is not available; agent testing aborted"
        return 1
    end

    if [ X"$argv[1]" != X ] ;
    	set -xg SSH_AUTH_SOCK $argv[1]
    end

    if [ X"$SSH_AUTH_SOCK" = X ]
    	return 2
    end

    if [ -S $SSH_AUTH_SOCK ] ;
        ssh-add -l > /dev/null
        if [ $status = 2 ] ;
            echo "Socket $SSH_AUTH_SOCK is dead!  Deleting!"
            rm -f $SSH_AUTH_SOCK
            return 4
        else ;
            echo "Found ssh-agent $SSH_AUTH_SOCK"
            return 0
        end
    else ;
        echo "$SSH_AUTH_SOCK is not a socket!"
        return 3
    end
end


function ssh_agent_init
    # ssh agent sockets can be attached to a ssh daemon process or an
    # ssh-agent process.

    set -l AGENTFOUND 0

    # Attempt to find and use the ssh-agent in the current environment
    if sshagent_testsocket ;
        set AGENTFOUND 1
    end

    # If there is no agent in the environment, search /tmp for
    # possible agents to reuse before starting a fresh ssh-agent
    # process.
    if [ $AGENTFOUND = 0 ];
        for agentsocket in (sshagent_findsockets)
            if [ $AGENTFOUND != 0 ] ;
	            break
            end
            if sshagent_testsocket $agentsocket ;
	       set AGENTFOUND 1
	    end

        end
    end

    # If at this point we still haven't located an agent, it's time to
    # start a new one
    if [ $AGENTFOUND = 0 ] ;
	echo need to start a new agent
	eval (ssh-agent -c)
    end

    # Finally, show what keys are currently in the agent
    # ssh-add -l
end

function azl --wraps='az login --use-device-code' --description 'alias azl=az login --use-device-code'
  az login --use-device-code $argv  
end


function install_ipykernel_pwd
    set current_directory (basename $PWD)
    set command "python -m ipykernel install --user --name temp.$current_directory --display-name temp/$current_directory"
    echo $command
    eval $command
end

function lndir
    # directory which will be linked, relative or absolute
    set -l target_directory $argv[1]
    # directory into which the link will be placed, absolute
    set -l symlink_name $argv[2]

    # the symlink will have the same name as the target directory
    
    # Check if both arguments are provided
    if test -z "$target_directory" -o -z "$symlink_name"
        echo "Usage: lndir target_directory symlink_name"
        return 1
    end

    # # Check if symlink_name exists
    # if test -e "$symlink_name"
    #     # If it exists, check if it's a directory
    #     if test ! -d "$symlink_name"
    #         echo "symlink_name must be a directory."
    #         return 1
    #     end

    #     # If it's a directory, check if it's empty
    #     if test -n "$(ls -A $symlink_name)"
    #         echo "symlink_name must be an empty directory."
    #         return 1
    #     end
    # else
    #     # If symlink_name doesn't exist, create an empty directory
    #     echo "symlink_name does not exist, creating an empty directory."
    #     mkdir -p "$symlink_name"
    # end

    # Create a symbolic link with an absolute target path
    ln -s (readlink -f "$target_directory") "$symlink_name"
end